{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "SegDupAnnotation2 Configurations",
    "description": "Config file for SegDupAnnotation2 used to annotate segmental duplications in a given species.",
    "type": "object",
    "properties": {
        "species": {
            "description": "The name, code, or identifier for the species or individual being processed.",
            "type": "string"
        },
        "reads_bam": {
            "description": "List of paths to read files in bam format.",
            "type": "array",
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true,
            "examples": [ [
                "/scratch1/krabbani/data/raw_bTaeGut2/m54306U_210519_154448.hifi_reads.bam",
                "/scratch1/krabbani/data/raw_bTaeGut2/m54306U_210521_004211.hifi_reads.bam"
            ] ]
        },
        "asm": {
            "description": "File path to assembly of this species/individual's genome in fasta format.",
            "type": "string",
            "examples": [ "/scratch1/krabbani/data/raw_bTaeGut2/bTaeGut2.hic.hap1.s2.fasta" ]
        },
        "genemodel": {
            "description": "Fasta file path of RNA transcripts of chosen gene model. Assumes default refseq format where gene code is in paranthesis, and parses fasta headers to find gene codes. If this is not true, fasta must be reformatted with header as gene code only.",
            "type": "string",
            "examples": [ "/scratch1/krabbani/data/taeGut2/GCF_003957565.2_bTaeGut1.4.pri_rna.fna" ]
        },
        "temp": {
            "description": "File path to an existing directory for temporary files.",
            "type": "string",
            "examples": [ "/scratch2/krabbani/sda_tmp/tmp_bTaeGut2_finch" ]
        },
        "read_type": {
            "description": "Note PacBio read technology type (CLR vs CCS). Used for metadata purposes only.",
            "type": "string",
            "enum": [ "CCS", "CLR" ],
            "examples": [ "CCS", "CLR" ]
        },
        "sex_chr": {
            "description": "List of sex chromosome names in given assembly.",
            "type": "array",
            "items": {
                "type": "string"
            },
            "minItems": 0,
            "uniqueItems": true,
            "examples": [ [
                "NC_064848.1",
                "NC_064856.1"
            ], [
                "SUPER_W",
                "SUPER_Z"
            ] ]
        },
        "min_copy_identity": {
            "description": "Minimum gene copy identity to keep when the gene copy is compared to the original copy.",
            "type": "number",
            "default": 0.90
        },
        "min_hit_length": {
            "description": "Minimum hit length to keep in bases.",
            "type": "integer",
            "default": 5000
        },
        "max_length_margin": {
            "description": "Keep gene copies with length within <max_length_margin> of the original gene's length.",
            "type": "number",
            "default": 0.10
        },
        "min_depth": {
            "description": "Minimum mean copy depth to keep as percentage of mean assembly depth.",
            "type": "number",
            "default": 0.05
        },
        "flag_filt_single_exon_genes": {
            "description": "When true keeps only genes with multiple exons.",
            "type": "boolean",
            "examples": [ true, false],
            "default": true
        },
        "flag_assume_clear_and_unique_gene_codes": {
            "description": "When false, assumes gene model fasta headers are in default RefSeq format, and thus renames all headers based on gene symbol in parenthesis at end of header line.",
            "type": "boolean",
            "examples": [ true, false],
            "default": true
        },
        "flag_filt_uncharacterized_genes": {
            "description": "When true filters out genes in gene model with gene names beginning with 'LOC'.",
            "type": "boolean",
            "examples": [ true, false],
            "default": true
        },
        "flag_allow_overlapping_genes": {
            "description": "When false group overlapping genes using network based approach.",
            "type": "boolean",
            "examples": [ true, false],
            "default": true
        },
        "flag_filtered": {
            "description": "Retain and calculate depth for all genes even those that don't meet filter minimums.",
            "type": "boolean",
            "examples": [ true, false],
            "default": false
        },
        "cluster_mem_mb_baby": {
            "description": "The memory in MB a cluster node or cpu must provide for a computationally simple job. In practice this parameter is combined with a cluster_cpus_per_task_<size> parameter by some rules to create a SLURM or other cluster job.",
            "type": "integer",
            "examples": [ 1000, 6000, 32000, 48000, 130000 ],
            "default": 1000
        },
        "cluster_mem_mb_small": {
            "description": "The memory in MB a cluster node or cpu must provide for a computationally simple job. In practice this parameter is combined with a cluster_cpus_per_task_<size> parameter by some rules to create a SLURM or other cluster job.",
            "type": "integer",
            "examples": [ 1000, 6000, 32000, 48000, 130000 ],
            "default": 6000
        },
        "cluster_mem_mb_medium": {
            "description": "The memory in MB a cluster node or cpu must provide for a computationally mild job. In practice this parameter is combined with a cluster_cpus_per_task_<size> parameter by some rules to create a SLURM or other cluster job.",
            "type": "integer",
            "examples": [ 1000, 6000, 32000, 48000, 130000 ],
            "default": 6000
        },
        "cluster_mem_mb_large": {
            "description": "The memory in MB a cluster node or cpu must provide for a computationally intense job. In practice this parameter is combined with a cluster_cpus_per_task_<size> parameter by some rules to create a SLURM or other cluster job.",
            "type": "integer",
            "examples": [ 1000, 6000, 32000, 48000, 130000 ],
            "default": 6000
        },
        "cluster_mem_mb_xlarge": {
            "description": "The memory in MB a cluster node or cpu must provide for a computationally intense job. In practice this parameter is combined with a cluster_cpus_per_task_<size> parameter by some rules to create a SLURM or other cluster job.",
            "type": "integer",
            "examples": [ 1000, 6000, 32000, 48000, 130000 ],
            "default": 6000
        },
        "cluster_cpus_per_task_baby": {
            "description": "The number of cpus per task for a computationally simple rule. In practice this parameter is combined with a cluster_mem_mb_<size> parameter by some rules to create a SLURM or other cluster job.",
            "type": "integer",
            "examples": [ 1, 4, 16, 64 ],
            "default": 1
        },
        "cluster_cpus_per_task_small": {
            "description": "The number of cpus per task for a computationally mild rule. In practice this parameter is combined with a cluster_mem_mb_<size> parameter by some rules to create a SLURM or other cluster job.",
            "type": "integer",
            "examples": [ 1, 4, 16, 64 ],
            "default": 3
        },
        "cluster_cpus_per_task_medium": {
            "description": "The number of cpus per task for a computationally intense rule. In practice this parameter is combined with a cluster_mem_mb_<size> parameter by some rules to create a SLURM or other cluster job.",
            "type": "integer",
            "examples": [ 1, 4, 16, 64 ],
            "default": 3
        },
        "cluster_cpus_per_task_large": {
            "description": "The number of cpus per task for a computationally intense rule. In practice this parameter is combined with a cluster_mem_mb_<size> parameter by some rules to create a SLURM or other cluster job.",
            "type": "integer",
            "examples": [ 1, 4, 16, 64 ],
            "default": 3
        },
        "cluster_runtime_short": {
            "description": "The walltime in minutes allocated for rules expected to take a relatively short amount of time (like 4 hrs). This parameter is only used if called in the cluster_exec parameter or by snakemake's --slurm command line paramter.",
            "type": "integer",
            "examples": [ 60, 240, 1440 ],
            "default": 240
        },
        "cluster_runtime_long": {
            "description": "The walltime in minutes allocated for rules expected to take a relatively long amount of time (like 24 hrs). This parameter is only used if called in the cluster_exec parameter or by snakemake's --slurm command line paramter.",
            "type": "integer",
            "examples": [ 60, 240, 1440 ],
            "default": 240
        },
        "cluster_exec": {
            "description": "Generic SLURM paramaters for running rules that are resource light or resource intense. Intended to be paired with snakemake's --cluster command line parameter.",
            "type": "string",
            "examples": [ "sbatch -c {resources.cpus_per_task} --mem={resources.mem_mb}MB --time={resources.runtime} --partition=qcb --account=mchaisso_100 --output=slurm-logs/slurm-%j.out" ]
        },
        "override_mem": {
            "description": "Override the memory available in MB otherwise defined by the cluster_mem_mb_<size> parameters in MB. If set to -1, the cluster_mem_mb_<X> paramters will not be overwritten.",
            "type": "integer",
            "examples": [ -1, 4000 ],
            "default": -1
        },
        "override_num_cores": {
            "description": "Override the number of allocated cores otherwise defined by the cluster_cpus_per_task_<size> parameters. If set to -1, the cluster_cpus_per_task_<size> paramters will not be overwritten.",
            "type": "integer",
            "examples": [ -1, 5 ],
            "default": -1
        }
    },
    "required": [
        "species",
        "reads_bam",
        "asm",
        "genemodel",
        "temp"
    ]
}