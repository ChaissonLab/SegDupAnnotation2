##### Segmental Duplication Annotation Pipeline for Vertebrate Genomes
#####
##### Keon Rabbani
##### krabbani@usc.edu
##### Chaisson Lab
##### University of Southern California

##### Purpose: Count resolved and collapsed gene duplications in vertebrate species.

### Import Libraries
from snakemake.utils import validate
from snakemake.utils import min_version

### Workflow Configurations
min_version("7.25.0") # Created using Snakemake v7.25.0

configfile: "config/sd_analysis.json"
validate(config, "schemas/config.schema.json", set_default=True)

containerized: "docker://krabbani/segdupannotation2:1.1.s"

### Variables & Constants
species=config["species"]
tmpDir=config["temp"]
bamFiles={f.split("/")[-1]: f for f in config["reads_bam"]}
catchFilt=config["flag_filtered"] # TODO Unused param

# Rule Resource Variables

if config["override_mem"] == -1:
    cluster_mem_mb_baby   = config["cluster_mem_mb_baby"]
    cluster_mem_mb_small  = config["cluster_mem_mb_small"]
    cluster_mem_mb_medium = config["cluster_mem_mb_medium"]
    cluster_mem_mb_large  = config["cluster_mem_mb_large"]
    cluster_mem_mb_xlarge = config["cluster_mem_mb_xlarge"]
else:
    cluster_mem_mb_baby   = config["override_mem"]
    cluster_mem_mb_small  = config["override_mem"]
    cluster_mem_mb_medium = config["override_mem"]
    cluster_mem_mb_large  = config["override_mem"]
    cluster_mem_mb_xlarge = config["override_mem"]

if config["override_num_cores"] == -1:
    cluster_cpus_per_task_baby   = config["cluster_cpus_per_task_baby"]
    cluster_cpus_per_task_small  = config["cluster_cpus_per_task_small"]
    cluster_cpus_per_task_medium = config["cluster_cpus_per_task_medium"]
    cluster_cpus_per_task_large  = config["cluster_cpus_per_task_large"]
else:
    cluster_cpus_per_task_baby   = config["override_num_cores"]
    cluster_cpus_per_task_small  = config["override_num_cores"]
    cluster_cpus_per_task_medium = config["override_num_cores"]
    cluster_cpus_per_task_large  = config["override_num_cores"]

### Load Rules
include: "rules/A_process_reads.smk"
include: "rules/B_hmm.smk"
include: "rules/C_process_gene_model.smk"
include: "rules/D_locate_resolved_gene_originals.smk"
include: "rules/E_locate_resolved_gene_copies.smk"
include: "rules/F_combine_genes_and_depth.smk"
include: "rules/G_summarize_results.smk"

### Target Rules
rule all:
    input:
        "results/G01_dups.bed",
        "results/G02_dups_fact.bed",
        "results/G03_per_gene_counts.bed",
        "results/G04_summary_stats.tsv",
        "results/G05_depthPlot_merged.pdf"
    localrule: True

onstart:
    print("Workflow started.")
onsuccess:
    print("Workflow finished without error.")
onerror:
    print("An error occurred. Check the .snakemake/log/ directory, the logs/ directory, and any cluster logs for details.")
